[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "simple-weather-app"
version = "1.25.0"
description = "A Python webservice that provides weather information for cities using the Open-Meteo API"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Weather Service Team", email = "team@weatherservice.com"}
]
maintainers = [
    {name = "Weather Service Team", email = "team@weatherservice.com"}
]
keywords = ["weather", "api", "fastapi", "open-meteo", "geocoding"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Framework :: FastAPI",
]
requires-python = ">=3.8"
dependencies = [
    "fastapi==0.104.1",
    "uvicorn==0.24.0",
    "requests==2.31.0",
    "geopy==2.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "httpx",
    "black",
    "flake8",
    "mypy",
    "pre-commit",
]
test = [
    "pytest",
    "pytest-asyncio",
    "httpx",
]

[project.urls]
Homepage = "https://github.com/willbender/simple-weather-app"
Repository = "https://github.com/willbender/simple-weather-app"
Documentation = "https://github.com/willbender/simple-weather-app/blob/main/README.md"
"Bug Tracker" = "https://github.com/willbender/simple-weather-app/issues"

[project.scripts]
weather-service = "src.main:app"

[tool.setuptools]
packages = ["src"]
package-dir = {"" = "src"}
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.conf", "*.json"]

# Black code formatter configuration
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Flake8 linter configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [".git", "__pycache__", "dist", "build", ".eggs"]

# MyPy type checker configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
    "build/*",
    "dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
